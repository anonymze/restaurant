---
import { Image } from "astro:assets";
import Layout from "@/layouts/layout.astro";
import PlanteImg from "@/assets/images/plante.jpg";
import PlatImg from "@/assets/images/plat.jpg";
import { Button } from "@/components/ui/button";
import AnimatedButton from "@/components/animated-button";

import { getImage } from "astro:assets";
import { cn } from "@/utils/libs/tailwaind";

const optimizedPlanteImage = await getImage({
	src: PlanteImg,
	format: "webp",
	widths: [240, 540, 720, 980, PlanteImg.width],
	loading: "eager",
});

const optimizedPlatImage = await getImage({
	src: PlatImg,
	format: "webp",
	widths: [240, 540, 720, 980, PlatImg.width],
	loading: "eager",
});
---

<Layout overflow={false}>
	<Fragment slot="head-preload">
		<link
			rel="preload"
			href={optimizedPlanteImage.src}
			as="image"
			imagesrcset={optimizedPlanteImage.srcSet.attribute}
			imagesizes={`(max-width: 360px) 240px, (max-width: 720px) 540px, (max-width: 980px) 720px, (max-width: 1600px) 980px, ${PlanteImg.width}px`}
		/>
		<link
			rel="preload"
			href={optimizedPlatImage.src}
			as="image"
			imagesrcset={optimizedPlatImage.srcSet.attribute}
			imagesizes={`(max-width: 360px) 240px, (max-width: 720px) 540px, (max-width: 980px) 720px, (max-width: 1600px) 980px, ${PlatImg.width}px`}
		/>
	</Fragment>

	<div class="flex flex-col w-full h-full md:flex-row">
		<div class="relative flex-1 h-1/2 md:h-full">
			<Image
				src={optimizedPlanteImage.src}
				width={PlanteImg.width}
				height={PlanteImg.height}
				sizes={`(max-width: 360px) 240px, (max-width: 720px) 540px, (max-width: 980px) 720px, (max-width: 1600px) 980px, ${PlanteImg.width}px`}
				alt="A description of my image."
				class="w-full h-full object-cover"
				loading="eager"
				fetchpriority="high"
			/>

			<div class="peer absolute inset-0 m-auto text-center w-fit h-fit z-10">
				<h2 class="mb-3 p-1 pb-2 text-5xl tracking-wide text-white text-shadow backdrop-blur-xs">Notre carte</h2>
				<AnimatedButton 
					client:load
					text="Carte des menus"
					className="w-fit h-fit px-8 py-3 bg-white/90 hover:bg-white"
				/>
			</div>

			<div
				class={cn(
					"absolute inset-0",
					"bg-gradient-to-t from-white/10 to-transparent",
					"after:block after:w-full after:h-full after:bg-gradient-to-t after:from-white/50 after:to-transparent after:opacity-0 after:transition-opacity after:duration-600",
					"peer-hover:after:opacity-40 hover:after:opacity-40"
				)}
			>
			</div>
		</div>

		<div class="relative flex-1 h-1/2 group md:h-full">
			<Image
				src={optimizedPlatImage.src}
				width={PlatImg.width}
				height={PlatImg.height}
				sizes={`(max-width: 360px) 240px, (max-width: 720px) 540px, (max-width: 980px) 720px, (max-width: 1600px) 980px, ${PlatImg.width}px`}
				alt="A description of my image."
				class="w-full h-full object-cover"
				loading="eager"
				fetchpriority="high"
			/>

			<div class="peer absolute inset-0 m-auto text-center w-fit h-fit z-10">
				<h2 class="mb-3 p-1 pb-2] text-5xl tracking-wide text-white text-shadow backdrop-blur-xs">Réservation</h2>
				<AnimatedButton 
					client:load
					text="Réserver"
					className="w-fit h-fit px-8 py-3 bg-white/90 hover:bg-white"
				/>
			</div>

			<div
				class={cn(
					"absolute inset-0",
					"bg-gradient-to-t from-white/10 to-transparent",
					"after:block after:w-full after:h-full after:bg-gradient-to-t after:from-white/50 after:to-transparent after:opacity-0 after:transition-opacity after:duration-600",
					"peer-hover:after:opacity-40 hover:after:opacity-40"
				)}
			>
			</div>
		</div>
	</div>
</Layout>

<script>
	const imageContainers = document.querySelectorAll("div");

	for (const container of imageContainers) {
		container.addEventListener("click", (e) => {
			console.log(e.target);
		});
	}
</script>

<style>
	.text-shadow {
		color: white;
		text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
		backdrop-filter: blur(5px);
	}
</style>
